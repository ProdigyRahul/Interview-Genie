generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(cuid())
  email              String   @unique
  hashedPassword     String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  emailVerified      DateTime?
  isVerified         Boolean  @default(false)
  image              String?
  name               String?
  subscriptionStatus String   @default("FREE")
  credits            Int      @default(100)
  resumes            Resume[]
  accounts           Account[]
  sessions           Session[]
  practiceSessions   PracticeSession[]
  practiceStats      PracticeStats?
  passwordResetTokens PasswordResetToken[]
  otpVerifications   OTPVerification[]
  resumeAnalyses     ResumeAnalysis[]
}

model Resume {
  id             String          @id @default(cuid())
  userId         String
  createdAt      DateTime        @default(now())
  title          String
  updatedAt      DateTime        @updatedAt
  achievements   Achievement[]
  certifications Certification[]
  education      Education[]
  experiences    Experience[]
  personalInfo   PersonalInfo?
  projects       Project[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills         Skills?
  summary        Summary?
  atsScore       Int?
  atsAnalysis    Json?

  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
}

model PersonalInfo {
  id        String  @id @default(cuid())
  resumeId  String  @unique
  fullName  String
  jobTitle  String
  email     String
  phone     String
  location  String
  linkedIn  String?
  portfolio String?
  resume    Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Experience {
  id           String   @id @default(cuid())
  resumeId     String
  companyName  String
  jobTitle     String
  startDate    String
  endDate      String
  description  String
  technologies String[]
  resume       Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@index([resumeId])
}

model Project {
  id           String   @id @default(cuid())
  resumeId     String
  name         String
  description  String
  url          String?
  technologies String[]
  startDate    String?
  endDate      String?
  resume       Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@index([resumeId])
}

model Education {
  id           String  @id @default(cuid())
  resumeId     String
  school       String
  degree       String
  fieldOfStudy String
  startDate    String
  endDate      String
  gpa          String?
  achievements String?
  resume       Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@index([resumeId])
}

model Certification {
  id            String  @id @default(cuid())
  resumeId      String
  name          String
  issuingOrg    String
  issueDate     String
  expiryDate    String?
  credentialId  String?
  credentialUrl String?
  resume        Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@index([resumeId])
}

model Achievement {
  id          String  @id @default(cuid())
  resumeId    String
  title       String?
  date        String?
  description String?
  resume      Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@index([resumeId])
}

model Skills {
  id        String   @id @default(cuid())
  resumeId  String   @unique
  technical String[]
  soft      String[]
  tools     String[]
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Summary {
  id       String @id @default(cuid())
  resumeId String @unique
  content  String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PracticeSession {
  id          String   @id @default(cuid())
  userId      String
  startTime   DateTime @default(now())
  endTime     DateTime?
  duration    Int?     // Duration in seconds
  sessionType String   // e.g., "interview", "document", "learning"
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([startTime])
}

model PracticeStats {
  id                String   @id @default(cuid())
  userId           String   @unique
  totalDuration    Int      @default(0)  // Total duration in seconds
  weeklyDuration   Int      @default(0)  // Weekly duration in seconds
  lastWeekDuration Int      @default(0)  // Last week's duration in seconds
  lastUpdated      DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  token   String   @unique
  email   String
  expires DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([userId])
}

model OTPVerification {
  id        String   @id @default(cuid())
  userId    String
  otp       String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ResumeAnalysis {
  id                String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  originalFilename String
  fileUrl          String
  totalScore       Int
  sectionScores    Json     // Store section scores as JSON
  improvements     Json     // Store improvement suggestions as JSON
  detailedBreakdown Json    // Store detailed breakdown as JSON
  keywordMatchRate String?  // Store keyword match rate
  missingKeywords  Json?    // Store missing keywords as JSON array
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
}
