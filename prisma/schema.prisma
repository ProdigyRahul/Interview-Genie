generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String    @unique
  emailVerified      DateTime?
  image              String?
  firstName          String?
  lastName           String?
  profileImage       String?
  subscriptionStatus String?   @default("free")
  isVerified         Boolean   @default(false)
  phoneNumber        String?
  preferences        Json?
  credits            Int       @default(200)
  xpPoints           Int       @default(0)
  level              Int       @default(1)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  lastLogin          DateTime?
  hashedPassword     String?

  // Profile completion fields
  dateOfBirth        DateTime?
  gender             String?
  ageGroup           String?
  companyName        String?
  industry           String?
  country            String?
  state              String?
  city               String?
  pinCode            String?
  workStatus         String?
  workExperience     String?
  qualification      String?
  otherQualifications String?
  hardSkills         Json?     // Array of skills
  isProfileComplete  Boolean   @default(false)
  profileProgress    Int       @default(0) // Percentage of profile completion
  avatarUrl          String?
  resumeUrl          String?
  cookieConsent      Boolean?
  experience         String?
  education          String?
  aspiration         String?
  lookingForInternship Boolean?

  // Auth related
  accounts Account[]
  sessions Session[]

  // Relations
  resumes             Resume[]
  mockInterviews      MockInterview[]
  interviewNotes      InterviewNote[]
  interviewHistory    InterviewHistory[]
  passwordResetTokens PasswordResetToken[]
  otpVerifications    OTPVerification[]
  userEducation       UserEducation?
}

model UserEducation {
  id          String   @id @default(cuid())
  userId      String   @unique
  course      String?
  result      String?
  passoutYear String?
  collegeName String?
  branchName  String?
  cgpa        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Admin {
  id                 String              @id @default(cuid())
  email              String              @unique
  firstName          String
  lastName           String
  role               String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  careerDomains      CareerDomain[]
  interviewScenarios InterviewScenario[]
  jobDescriptions    JobDescription[]
  jobRoles           JobRole[]
}

model CareerDomain {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  createdById        String
  createdBy          Admin               @relation(fields: [createdById], references: [id])
  interviewScenarios InterviewScenario[]
  jobRoles           JobRole[]
}

model JobRole {
  id              String           @id @default(cuid())
  domainId        String
  title           String
  level           String
  description     String?
  requiredSkills  Json?
  experienceYears Int
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdById     String
  jobDescriptions JobDescription[]
  createdBy       Admin            @relation(fields: [createdById], references: [id])
  domain          CareerDomain     @relation(fields: [domainId], references: [id])
  mockInterviews  MockInterview[]
  resumes         Resume[]
}

model JobDescription {
  id              String          @id @default(cuid())
  roleId          String
  title           String
  company         String
  description     String
  requirements    Json
  industry        String
  experienceLevel String
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  createdById     String
  createdBy       Admin           @relation(fields: [createdById], references: [id])
  role            JobRole         @relation(fields: [roleId], references: [id])
  mockInterviews  MockInterview[]
}

model Resume {
  id         String   @id @default(cuid())
  userId     String
  roleId     String
  resumeUrl  String
  fileType   String
  parsedData Json?
  atsScore   Int?
  uploadedAt DateTime @default(now())
  isCurrent  Boolean  @default(false)
  role       JobRole  @relation(fields: [roleId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model InterviewScenario {
  id             String          @id @default(cuid())
  domainId       String
  title          String
  description    String
  questions      Json
  difficulty     String
  duration       Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdById    String
  createdBy      Admin           @relation(fields: [createdById], references: [id])
  domain         CareerDomain    @relation(fields: [domainId], references: [id])
  mockInterviews MockInterview[]
}

model MockInterview {
  id                 String             @id @default(cuid())
  userId             String
  jobId              String
  roleId             String
  scenarioId         String
  startTime          DateTime
  endTime            DateTime?
  interviewType      String
  status             String
  score              Int?
  feedback           Json?
  duration           Int?
  technicalScore     Float?
  behavioralScore    Float?
  communicationScore Float?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  history            InterviewHistory[]
  notes              InterviewNote[]
  recordings         MediaRecording[]
  job                JobDescription     @relation(fields: [jobId], references: [id])
  role               JobRole            @relation(fields: [roleId], references: [id])
  scenario           InterviewScenario  @relation(fields: [scenarioId], references: [id])
  user               User               @relation(fields: [userId], references: [id])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InterviewHistory {
  id          String        @id @default(cuid())
  userId      String
  interviewId String
  action      String
  timestamp   DateTime
  metadata    Json?
  createdAt   DateTime      @default(now())
  interview   MockInterview @relation(fields: [interviewId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
}

model InterviewNote {
  id          String        @id @default(cuid())
  interviewId String
  userId      String
  content     String
  timestamp   Int?
  noteType    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  interview   MockInterview @relation(fields: [interviewId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
}

model MediaRecording {
  id           String              @id @default(cuid())
  interviewId  String
  mediaType    String
  fileUrl      String
  thumbnailUrl String?
  duration     Int
  fileSize     BigInt
  format       String
  quality      String
  status       String
  createdAt    DateTime            @default(now())
  archivedAt   DateTime?
  interview    MockInterview       @relation(fields: [interviewId], references: [id])
  analysis     RecordingAnalysis[]
  segments     RecordingSegment[]
}

model RecordingSegment {
  id          String         @id @default(cuid())
  recordingId String
  startTime   Int
  endTime     Int
  segmentUrl  String
  transcript  String?
  highlights  Json?
  createdAt   DateTime       @default(now())
  recording   MediaRecording @relation(fields: [recordingId], references: [id])
}

model RecordingAnalysis {
  id                 String         @id @default(cuid())
  recordingId        String
  analysisType       String
  confidenceScore    Float
  clarityScore       Float
  paceScore          Float
  voiceToneAnalysis  Json?
  fillerWordsCount   Int
  silencePeriods     Json?
  volumeVariance     Json?
  languageConfidence Float
  facialExpressions  Json?
  eyeContactScore    Float?
  postureAnalysis    Json?
  gestureMetrics     Json?
  createdAt          DateTime       @default(now())
  recording          MediaRecording @relation(fields: [recordingId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model OTPVerification {
  id        String   @id @default(cuid())
  userId    String
  otp       String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
